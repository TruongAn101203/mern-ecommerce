import userModel from "../models/userModel.js";
import productModel from "../models/productModel.js";

// Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
export const addToCart = async (req, res) => {
  try {
    const { itemId, size } = req.body;
    const userId = req.user?.id;

    if (!userId || !itemId || !size) {
      return res.status(400).json({ success: false, message: "Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc" });
    }

    // L·∫•y th√¥ng tin s·∫£n ph·∫©m
    const product = await productModel.findById(itemId);
    if (!product) {
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });
    }

    const user = await userModel.findById(userId);
    if (!user) {
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
    }

    // Kh·ªüi t·∫°o cartData n·∫øu ch∆∞a c√≥
    if (!user.cartData) {
      user.cartData = {};
    }

    // Kh·ªüi t·∫°o s·∫£n ph·∫©m trong gi·ªè h√†ng n·∫øu ch∆∞a c√≥
    if (!user.cartData[itemId]) {
      user.cartData[itemId] = {
        product: {
          _id: product._id,
          name: product.name,
          price: product.price,
          image: product.image[0],
          // Th√™m c√°c th√¥ng tin kh√°c n·∫øu c·∫ßn
        },
        sizes: {}
      };
    }

    // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng cho size t∆∞∆°ng ·ª©ng
    if (!user.cartData[itemId].sizes[size]) {
      user.cartData[itemId].sizes[size] = 0;
    }
    user.cartData[itemId].sizes[size] += 1;

    // ƒê√°nh d·∫•u l√† ƒë√£ thay ƒë·ªïi ƒë·ªÉ l∆∞u v√†o database
    user.markModified('cartData');
    await user.save();

    res.json({ 
      success: true, 
      message: "ƒê√£ th√™m v√†o gi·ªè h√†ng",
      cartData: user.cartData 
    });
  } catch (error) {
    console.error("Error adding to cart:", error);
    res.status(500).json({ success: false, message: "Failed to add item to cart" });
  }
};

// C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng
export const updateCart = async (req, res) => {
  try {
    const { itemId, size, quantity } = req.body;
    const userId = req.user?.id;

    if (!userId || !itemId || !size) {
      return res.status(400).json({ success: false, message: "Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc" });
    }

    const user = await userModel.findById(userId);
    if (!user) {
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
    }

    // Kh·ªüi t·∫°o cartData n·∫øu ch∆∞a c√≥
    if (!user.cartData) {
      user.cartData = {};
    }

    // N·∫øu s·ªë l∆∞·ª£ng <= 0, x√≥a s·∫£n ph·∫©m
    if (quantity <= 0) {
      if (user.cartData[itemId]?.sizes?.[size]) {
        delete user.cartData[itemId].sizes[size];
        
        // N·∫øu kh√¥ng c√≤n size n√†o, x√≥a lu√¥n s·∫£n ph·∫©m
        if (Object.keys(user.cartData[itemId].sizes).length === 0) {
          delete user.cartData[itemId];
        }
      }
    } else {
      // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng
      if (!user.cartData[itemId]) {
        // N·∫øu s·∫£n ph·∫©m ch∆∞a c√≥ trong gi·ªè h√†ng, th√™m m·ªõi
        const product = await productModel.findById(itemId);
        if (!product) {
          return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });
        }
        
        user.cartData[itemId] = {
          product: {
            _id: product._id,
            name: product.name,
            price: product.price,
            image: product.image[0],
          },
          sizes: {}
        };
      }
      
      if (!user.cartData[itemId].sizes) user.cartData[itemId].sizes = {};
      user.cartData[itemId].sizes[size] = quantity;
    }

    // ƒê√°nh d·∫•u l√† ƒë√£ thay ƒë·ªïi ƒë·ªÉ l∆∞u v√†o database
    user.markModified('cartData');
    await user.save();
    
    res.json({ 
      success: true, 
      message: "C·∫≠p nh·∫≠t gi·ªè h√†ng th√†nh c√¥ng",
      cartData: user.cartData 
    });
  } catch (error) {
    console.error("L·ªói khi c·∫≠p nh·∫≠t gi·ªè h√†ng:", error);
    res.status(500).json({ 
      success: false, 
      message: "L·ªói khi c·∫≠p nh·∫≠t gi·ªè h√†ng",
      error: error.message 
    });
  }
};

// X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
export const removeFromCart = async (req, res) => {
  try {
    const { itemId, size } = req.body;
    const userId = req.user?.id;

    if (!userId || !itemId || !size) {
      return res.status(400).json({ success: false, message: "Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc" });
    }

    const user = await userModel.findById(userId);
    if (!user) {
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
    }

    // Ki·ªÉm tra xem s·∫£n ph·∫©m c√≥ t·ªìn t·∫°i trong gi·ªè h√†ng kh√¥ng
    if (user.cartData[itemId]?.[size]) {
      delete user.cartData[itemId][size];
      
      // N·∫øu kh√¥ng c√≤n size n√†o cho s·∫£n ph·∫©m n√†y, x√≥a lu√¥n itemId
      if (Object.keys(user.cartData[itemId]).length === 0) {
        delete user.cartData[itemId];
      }

      await user.save();
      return res.json({ 
        success: true, 
        message: "ƒê√£ x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng",
        cartData: user.cartData
      });
    }

    res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m trong gi·ªè h√†ng" });
  } catch (error) {
    console.error("L·ªói khi x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng:", error);
    res.status(500).json({ success: false, message: "L·ªói khi x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng" });
  }
};

// L·∫•y gi·ªè h√†ng c·ªßa ng∆∞·ªùi d√πng
export const getUserCart = async (req, res) => {
  try {
    const userId = req.user?.id;
    console.log(`üîÑ [getUserCart] Fetching cart for user: ${userId}`);
    
    if (!userId) {
      console.error("‚ùå [getUserCart] Missing user ID");
      return res.status(400).json({ success: false, message: "Thi·∫øu th√¥ng tin ng∆∞·ªùi d√πng" });
    }

    const user = await userModel.findById(userId).lean();
    if (!user) {
      console.error(`‚ùå [getUserCart] User not found: ${userId}`);
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
    }

    // ƒê·∫£m b·∫£o cartData t·ªìn t·∫°i
    const cartData = user.cartData || {};
    console.log(`üì¶ [getUserCart] Raw cart data:`, JSON.stringify(cartData, null, 2));

    // L√†m s·∫°ch d·ªØ li·ªáu cart
    const cleanedCartData = {};
    
    for (const [itemId, itemData] of Object.entries(cartData)) {
      if (!itemData || !itemData.sizes || Object.keys(itemData.sizes).length === 0) {
        console.log(`‚ö†Ô∏è [getUserCart] Skipping invalid cart item: ${itemId}`, itemData);
        continue;
      }
      
      // ƒê·∫£m b·∫£o m·ªói item c√≥ ƒë·ªß th√¥ng tin s·∫£n ph·∫©m
      if (!itemData.product) {
        console.log(`‚ö†Ô∏è [getUserCart] Fetching missing product data for: ${itemId}`);
        try {
          const product = await productModel.findById(itemId).lean();
          if (product) {
            itemData.product = {
              _id: product._id,
              name: product.name,
              price: product.price,
              image: product.image?.[0] || ''
            };
          }
        } catch (err) {
          console.error(`‚ùå [getUserCart] Error fetching product ${itemId}:`, err);
          continue;
        }
      }
      
      // Ch·ªâ gi·ªØ l·∫°i c√°c size c√≥ s·ªë l∆∞·ª£ng > 0
      const validSizes = {};
      for (const [size, quantity] of Object.entries(itemData.sizes)) {
        if (quantity > 0) {
          validSizes[size] = quantity;
        }
      }
      
      if (Object.keys(validSizes).length > 0) {
        cleanedCartData[itemId] = {
          ...itemData,
          sizes: validSizes
        };
      }
    }

    console.log(`‚úÖ [getUserCart] Returning cleaned cart data`);
    
    res.json({ 
      success: true, 
      cartData: cleanedCartData,
      message: "L·∫•y gi·ªè h√†ng th√†nh c√¥ng"
    });
  } catch (error) {
    console.error("L·ªói khi l·∫•y gi·ªè h√†ng:", error);
    res.status(500).json({ 
      success: false, 
      message: "L·ªói khi l·∫•y th√¥ng tin gi·ªè h√†ng",
      error: error.message 
    });
  }
};
